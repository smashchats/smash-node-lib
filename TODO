## HAPPY PATH

- [x] generating a peer identity / DID
- [x] exporting a peer identity / DID
- [x] loading a peer identity into a SmashMessaging instance
- [x] connecting to SME
- [x] sending a text message to a peer
- [x] receiving a text message from a peer
- [x] handling message status updates
- [x] FEAT: ack read messages
- [x] firehose API
- [x] receiving a profile message from a peer
- [x] updating the peer's profile
- [x] clean peer shutdown
- [x] setting up a Neighborhood / NAB
- [x] joining the Neighborhood
- [x] discovering other peers in the neighborhood (NBH_PROFILE_LIST)
- [x] smashing another user from the neighborhood
- [x] passing another user from the neighborhood
- [x] clearing another user from the neighborhood

- [ ] update message status more granular (sending, delivered, received, read, failed, retrying)
- [ ] profile updates using diff strategy & tracking current state/requesting new state?
- [ ] loading the library with existing _data_ (tbd)
- [ ] trust levels -> privacy
- [ ] blocking/unblocking another peer
- [ ] report peer to admins

- [ ] split NAB backend / frontend
- [ ] NAB persistent data

- [ ] DID standard : format and generic resolvers
  - https://medium.com/danube-tech/the-power-of-dids-5-a-deep-dive-into-service-endpoints-and-digital-product-passports-2c60f3e68f8d
  - https://github.com/w3c/did-core?tab=readme-ov-file
  - https://w3c.github.io/did-core/#dfn-service
  - https://atproto.com/specs/blob
  - https://www.ietf.org/archive/id/draft-mayrhofer-did-dns-05.txt
  - https://github.com/decentralized-identity/did-spec-extensions/blob/main/parameters/signed-ietf-json-patch.md
  - https://github.com/w3c/did-resolution/issues/7
  - https://atproto.com/specs/data-model
  - https://www.w3.org/TR/did-extensions-resolution/#signedIetfJsonPatch-param
  - https://www.w3.org/TR/did-extensions-properties/#serviceendpoint
  - https://identity.foundation/peer-did-method-spec/
  - https://learn.mattr.global/docs/cwt/dids

- [ ] DID::fetch:: key
- [ ] DID::fetch:: web
- [ ] DID re-fetch strategy on failure (re-fetch patch vs fetch replace (truth/canonical))
- [ ] DID expiry (to sync with session TTL)

- [ ] investigate performance and memory usage (eg, dangling sessions, dlqs)

### TESTS REFACTORING (keeping or increasing coverage):

- [ ] generate unit .test files with mocks/spies for each module corresponding to the library API reference (**testing only publicly exported**) --> should have 100% coverage for publicly exposed APIs (public and internal)
- [ ] refactor functional (.spec) tests files to be more readable, maintainable, comprehensive -> and corresponding to The Tutorial and the How-Tos --> should have 100% functional coverage (100% of the lines, combined)

### GENERATE DOCS FROM TESTS:

- [ ] convert back and forth between tests and docs (GPT API?)
- [ ] publish docs along with tests results and links to source code

use ReSpec for protocol specs repo

## Random notes

DID resolvers / generators / managers, based on

- with cache (use lib?)

https://github.com/digitalbazaar/did-io
https://www.npmjs.com/package/@digitalbazaar/did-method-key
https://www.npmjs.com/package/did-resolver
https://www.npmjs.com/package/@cef-ebsi/key-did-resolver

for badges/endorsements?:
https://www.npmjs.com/package/@cef-ebsi/verifiable-credential

https://github.com/decentralized-identity/did-resolver

DIDcomm? https://identity.foundation/didcomm-messaging/spec/

\_did DNS URI record
eq to \_atproto TXT record
https://www.ietf.org/archive/id/draft-mayrhofer-did-dns-05.txt

--> write specs and get them accepted in IETF and/or W3C (referencing their own)

Note: a DID is PII as per the GDPR.

investigate JWE for the challenge
